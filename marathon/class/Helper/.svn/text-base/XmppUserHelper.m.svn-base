//
//  XmppUserHelperr.m
//  Match
//
//  Created by wangweiqing on 13-01-14.
//  Copyright 2013年 __MyCompanyName__. All rights reserved.
//

#import "XmppUserHelper.h"

#define keyForArrayForFriends   @"keyForArrayForFriends"

@implementation XmppUserHelper

@synthesize arrayAllFriends;

- (id)init {
    self = [super init];
    if (self) {
        
        self.arrayAllFriends = [NSMutableArray array];
        NSArray *arrayFriends = [PersistenceHelper dataForKey:keyForArrayForFriends];
        if (arrayFriends && [arrayFriends isKindOfClass:[NSArray class]]) {
            [self.arrayAllFriends addObjectsFromArray:arrayFriends];
        }
    }
    return self;
}

#pragma mark -
#pragma mark - 添加一个好友（JID和AccountID等内容的Dict）
- (BOOL)addOneUserWithDict:(NSDictionary*)userDict forceToOverWrite:(BOOL)isForced {
    BOOL isNewUser = NO;
    if (userDict) {
        NSString* accountID = [userDict objForKey:@"accountID"];
        NSString* xmppJID = [userDict objForKey:@"xmppJID"];
        
        BOOL isExist = NO;
        for (int n=0; n<[arrayAllFriends count]; n++) {
            NSDictionary* existDict = [arrayAllFriends objectAtIndex:n];
            NSString* existAccountID = [existDict objForKey:@"accountID"];
            NSString* existJID = [existDict objForKey:@"xmppJID"];
            
            if (accountID && [accountID length]>0 && xmppJID && [xmppJID length]>0) {
                if ((existAccountID && [existAccountID isEqualToString:accountID]) || (existJID && [existJID isEqualToString:xmppJID])) {
                    //传入的JID 和 AccountID 都存在，直接替换原有，暂时不管 isForced 参数
                    [arrayAllFriends replaceObjectAtIndex:n withObject:userDict];
                    if (arrayAllFriends) {
                        [PersistenceHelper setData:arrayAllFriends forKey:keyForArrayForFriends];
                    }
                    break;
                }
            }else if (accountID && [accountID length]>0) {
                if (existAccountID && [existAccountID isEqualToString:accountID]) {
                    isExist = YES;
                }
            }else if (xmppJID && [xmppJID length]>0) {
                if (existJID && [existJID isEqualToString:xmppJID]) {
                    isExist = YES;
                }
            }
            
            if (YES == isExist) {//JID 或者 AccountID 存在，替换
                if (isForced) {
                    [arrayAllFriends replaceObjectAtIndex:n withObject:userDict];
                    if (arrayAllFriends) {
                        [PersistenceHelper setData:arrayAllFriends forKey:keyForArrayForFriends];
                    }
                }
                break;
            }
        }
        
        if (NO == isExist) {//JID 和 AccountID 都不存在，直接添加
            isNewUser = YES;
            [arrayAllFriends addObject:userDict];
            if (arrayAllFriends) {
                [PersistenceHelper setData:arrayAllFriends forKey:keyForArrayForFriends];
            }
        }
    }
    
    return isNewUser;
}

#pragma mark -
#pragma mark - 删除一个好友 
//xmppJID 或 accountID 必须有一个不为空
- (void)deleteOneUserByJID:(NSString*)xmppJID orAccountID:(NSString*)accountID {
    if ((xmppJID && [xmppJID length]>0) || (accountID && [accountID length]>0)) {
        
        BOOL isExist = NO;
        
        NSMutableArray* removeArray = [NSMutableArray arrayWithCapacity:0];
        
        for (int n=0; n<[arrayAllFriends count]; n++) {
            NSDictionary* existDict = [arrayAllFriends objectAtIndex:n];
            if (accountID && [accountID length]>0) {
                NSString* existAccountID = [existDict objForKey:@"accountID"];
                if (existAccountID && [existAccountID isEqualToString:accountID]) {
                    isExist = YES;
                }
            }else if (xmppJID && [xmppJID length]>0) {
                NSString* existJID = [existDict objForKey:@"xmppJID"];
                if (existJID && [existJID isEqualToString:xmppJID]) {
                    isExist = YES;
                }
            }
            
            if (YES == isExist) {//JID 或者 AccountID 存在，删除
                [removeArray addObject:existDict];
                break;
            }
        }
        
        if (removeArray && [removeArray count]>0) {
            [arrayAllFriends removeObjectsInArray:removeArray];
            [PersistenceHelper setData:arrayAllFriends forKey:keyForArrayForFriends];
        }
        
    }
}

#pragma mark -
#pragma mark - 生成一个好友字典
- (NSDictionary*)makeOneUserWithJID:(NSString*)xmppJID AccountID:(NSString*)accountID {
    if ((xmppJID && [xmppJID length]>0) || (accountID && [accountID length]>0)) {
        NSString* toAddxmppJID = @"";
        if (xmppJID && [xmppJID length]>0) {
            toAddxmppJID = xmppJID;
        }
        
        NSString* toAddaccountID = @"";
        if (accountID == nil) {
            toAddaccountID = accountID;
        }
        
        return [NSDictionary dictionaryWithObjectsAndKeys:toAddxmppJID,@"xmppJID", toAddaccountID,@"accountID",nil];
    }
    return nil;
}

#pragma mark -
#pragma mark - 根据JID获取用户ID
- (NSString*)getAccountIDByJID:(NSString*)xmppJID {
    NSString* accountID = nil;
    if (xmppJID && [xmppJID length]>0) {
        for (NSDictionary* dict in arrayAllFriends) {
            NSString* existJID = [dict objForKey:@"xmppJID"];
            if (existJID && [existJID isEqualToString:xmppJID]) {
                accountID = [dict objForKey:@"accountID"];
            }
        }
    }
    
    return accountID;
}

#pragma mark -
#pragma mark - 根据用户ID获取JID
- (NSString*)getJIDByAccountID:(NSString*)accountID {
    NSString* xmppJID = nil;
    if (accountID && [accountID length]>0) {
        for (NSDictionary* dict in arrayAllFriends) {
            NSString* existAccountID = [dict objForKey:@"accountID"];
            if (existAccountID && [existAccountID isEqualToString:accountID]) {
                xmppJID = [dict objForKey:@"xmppJID"];
            }
        }
    }
    return xmppJID;
}

#pragma mark - xmppUserDelegate
//在线好友
-(void)newBuddyOnline:(NSString *)buddyName {
    
}

//好友下线
-(void)buddyWentOffline:(NSString *)buddyName {
    
}

- (void)dealloc {
    
    self.arrayAllFriends   = nil;
    [super dealloc];
}

@end
